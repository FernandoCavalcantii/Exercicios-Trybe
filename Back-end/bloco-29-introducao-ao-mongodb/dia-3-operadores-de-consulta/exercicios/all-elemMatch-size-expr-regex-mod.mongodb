/* Utilizando o operador $all, retorne todos os filmes que contenham action e adventure no array category.
*/

db.movies.find({
  category: {
    $all: ['action', 'adventure']
  }
}).count()

// üöÄ Agora retorne os filmes que contenham action e sci-fi no array category e possuem nota do IMDB maior do que 7.


db.movies.find({
  $and: [
    {category: {$all: ['action', 'sci-fi']}},
    {imdbRating: {$gte: 7}}
  ]
})

// Retorne todos os filmes com ratings maior do que 103, exibindo apenas os campos title e ratings.


db.movies.find({
  ratings: {$elemMatch: {$gte: 103}}
}, {_id: 0, title: 1, ratings: 1})

// üöÄ Retorne todos os filmes com ratings entre 64 e 105 e divis√≠veis por 9, exibindo apenas os campos title e ratings.

db.movies.find({
  ratings: {$elemMatch: {$gt: 64, $lt: 105, $mod: [4, 0]}}
},  {
    _id: 0,
    title: 1,
    ratings: 1
  })

// Retorne os filmes da categoria adventure e com ratings maior do que 103, exibindo apenas os campos title, ratings e category.

db.movies.find({
  ratings: {$elemMatch: {$gt: 103}},
  category: {$all: ['adventure']} 
}, {title: 1, ratings: 1, category: 1})

// alternativamente:

db.movies.find({
  $and: [ //tamb√©m pode comentar o $and que funciona
    {
      ratings: {$elemMatch: {$gt: 103}}
    },
    {
      category: {$elemMatch: {$eq: 'adventure'}}
    }
  ]
}, {title: 1, ratings: 1, category: 1})

// Retorne somente o t√≠tulo de todos os filmes com dois elementos no array category.

db.movies.find(
  {category: {$size: 2}},
  {_id: 0, title: 1}
)

// Exerc√≠cio 8: Retorne somente o t√≠tulo de todos os filmes com quatro elementos no array ratings.

db.movies.find(
  {ratings: {$size: 4}},
  {_id: 0, title: 1}
);

// Exerc√≠cio 9: Busque os filmes em que o m√≥dulo 5 do campo budget seja 0 e que o array category tenha tamanho 2.

db.movies.find(
  {
    budget: {$mod: [5, 0]},
    category: {$size: 2}
  }
);

// Exerc√≠cio 10: Retorne os filmes da categoria "sci-fi" ou que possua o ratings maior do que 199, exibindo apenas os campos title, ratings e category.

db.movies.find(
  {
    $or: [
      {
        category: {$all: ['sci-fi']},
      },
      {
        ratings: {$elemMatch: {$gt: 199}}
      }
    ]
  }, {_id: 0, ratings: 1, category: 1}
);

// Exerc√≠cio 11: Retorne os filmes em que o ratings possua tamanho 4 e que seja da category "adventure" ou "family", mas que n√£o tenha o imdbRating menor que 7.

db.movies.find(
  {
    $and: [
      {ratings: {$size: 4}},
      {imdbRating: {$gte: 7}},
      {category: {$in: ['family', 'adventure']}}
    ]
  }
)


// alternativamente:

db.movies.find(
  {
    $and: [
      {ratings: {$size: 4}},
      {imdbRating: {$gte: 7}},
    {
      $or: [
      {
        category: {$elemMatch: {$eq: 'family'}}
      },
      {
        category: {$elemMatch: {$eq: 'adventure'}}
      }
    ]
    }
    ]
  }
)

// Exerc√≠cio 12: Utilizando o operador $regex, retorne todos os filmes em que a descri√ß√£o comece com a palavra "The".

db.movies.find(
  {
    description: {$regex: /^The/}
  }
);

// Exerc√≠cio 13: Utilizando o operador $regex, retorne todos os filmes em que a descri√ß√£o termine com a palavra "humanity.".

db.movies.find(
  {
    description: {$regex: /humanity.$/}
  }
);


// A query abaixo utiliza o operador $expr para buscar os documentos em que o valor de spent exceda o valor de budget:


db.monthlyBudget.find(
  {
    $expr: { $gt: [ "$spent", "$budget" ] }
  }
);