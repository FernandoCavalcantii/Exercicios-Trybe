db.inventory.insertMany([
{ "item": "journal", "qty": 25, "size": { "h": 14, "w": 21, "uom": "cm" }, "status": "A" },
{ "item": "notebook", "qty": 50, "size": { "h": 8.5, "w": 11, "uom": "in" }, "status": "A" },
{ "item": "paper", "qty": 100, "size": { "h": 8.5, "w": 11, "uom": "in" }, "status": "D" },
{ "item": "planner", "qty": 75, "size": { "h": 22.85, "w": 30, "uom": "cm" }, "status": "D" },
{ "item": "postcard", "qty": 45, "size": { "h": 10, "w": 15.25, "uom": "cm" }, "status": "A" }
]);

// updateOne & updateMany

db.inventory.updateOne(
  { item: "paper" },
  { $set: { "size.uom": "cm", status: "P" } }
);

db.inventory.updateMany(
  { "qty": { $lt: 50 } },
  { $set: { "size.uom": "in", status: "P" } }
);

// -> upserted <-
// (se não encontrar nada no filtro, cria novo documento com os valores passados no update)

db.inventory.updateOne(
  { item: "paper" },
  { $set: { "size.uom": "cm", status: "P" } },
  { upserted: true }
);
db.products.insertOne({
  _id: 100,
  sku: "abc123",
  quantity: 250,
  instock: true,
  reorder: false,
  details: { model: "14Q2", make: "xyz" },
  tags: [ "apparel", "clothing" ],
  ratings: [ { by: "ijk", rating: 4 } ]
})

// -> $set <-

db.products.update(
  { _id: 100 },
  { $set: {
      quantity: 500,
      details: { model: "14Q3", make: "xyz" },
      tags: [ "coats", "outerwear", "clothing" ]
    }
  }
);

db.products.update(
  { _id: 100 },
  { $set: { "details.make": "zzz" } }
);

db.products.update(
  { _id: 100 },
  { $set: {
      "tags.1": "rain gear",
      "ratings.0.rating": 2
    }
  }
);

db.products.insertOne(
  { "_id": 1, "item": "ABC", "price": NumberDecimal("10.99"), "qty": 25 }
);

-> $mul <-

db.products.update(
  { _id: 1 },
  { $mul: { price: NumberDecimal("1.25"), qty: 2 } }
);

db.products.insertOne(
  { _id: 2, item: "Unknown" }
);

// -> $mul com campo não existente <-
// (vai criar o campo e atribuir o valor 0 do mesmo tipo númerico, no caso abaixo, NumberLong)

db.products.update(
  { _id: 2 },
  { $mul: { price: NumberLong("100") } }
);

// -> $mul com tipos numéricos diferentes, regras de conversão <-
// https://docs.mongodb.com/manual/reference/operator/update/mul/#multiplication-type-conversion 

db.products.insertOne(
  { _id: 3,  item: "XYZ", price: NumberLong("10") }
);

db.products.update(
  { _id: 3 },
  { $mul: { price: NumberInt(5) } }
);

// -> $inc <-

db.increment.insertOne(
  {
    _id: 1,
    sku: "abc123",
    quantity: 10,
    metrics: {
      orders: 2,
      ratings: 3.5
    }
  }
)

db.increment.update(
  { sku: "abc123" },
  { $inc: { quantity: -2, "metrics.orders": 1 } }
);

// -> $min, $max -<
//( Também funciona com datas )
// min - o valor que for maior, desce para o valor min
// max - o valor que for menor, sobe para o valor max

db.scores.insertOne(
  { _id: 1, highScore: 800, lowScore: 200 }
);

db.scores.update({ _id: 1 }, { $min: { lowScore: 150 } });

db.scores.update({ _id: 1 }, { $max: { highScore: 950 } });

db.tags.insertOne(
  {
    _id: 1,
    desc: "crafts",
    dateEntered: ISODate("2019-10-01T05:00:00Z"),
    dateExpired: ISODate("2019-10-01T16:38:16Z")
  }
);

db.tags.update(
  { _id: 1 },
  {
min: { dateEntered: new Date("2019-09-25") },
max: { dateExpired: new Date("2019-10-02") }
  }
);

// -> $currentDate <-

db.customers.insertOne(
  { _id: 1, status: "a", lastModified: ISODate("2013-10-02T01:11:18.965Z") }
);

db.customers.updateOne(
  { _id: 1 },
  { $currentDate: {
      lastModified: true,
      "cancellation.date": { $type: "timestamp" }
    }, $set: {
      "cancellation.reason": "user request",
      status: "D"
    }
  }
);

// -> $rename <-
// primeiro param. é um filtro

db.fruits.insertOne(
  { _id: 100, name: "Banana", quantity: 100, inStock: true }
);

db.fruits.updateOne(
  { name: "Banana" },
  { $rename: {
      "name": "productName"
    }
  }
);

// -> $unset <-
// remove o atributo, o objeto anterior ficaria assim:
{_id: 100, productName: "Banana", inStock: true }


db.fruits.updateMany(
  { productName: "Banana" },
  { $unset: { quantity: "" } }
);
