# ExercÃ­cio 1 Dado um array de nÃºmeros de tamanho n, escreva um algoritmo que retorna true se hÃ¡ no array um nÃºmero duplicado e false caso contrÃ¡rio. Analise a soluÃ§Ã£o abaixo e diga qual Ã© a ordem de complexidade desse algoritmo para o melhor caso, pior caso e caso mÃ©dio.


def contains_duplicate(numbers):
    numbers.sort()
    previous_number = "not a number"
    for number in numbers:
        if previous_number == number:
            return True
        previous_number = number

    return False


# Resp - O(n log n) + O(n) => O(n log n) ou O(n * log n)


# ğŸš€ ExercÃ­cio 2 Suponha que se estÃ¡ escrevendo uma funÃ§Ã£o para um jogo de batalha naval. Dado um array bidimensional com n linhas e m colunas, e um par de coordenadas x para linhas e y para colunas, o algoritmo verifica se hÃ¡ um navio na coordenada alvo. Por exemplo:

# entrada = [ 0 0 0 0 1
#             0 0 0 0 1
#             1 1 1 1 1
#             0 0 0 1 0 ]

# resultado para (0, 4) = True
# resultado para (1, 1) = False

# Resp:

""" Mesmo para um array bidimensional, o acesso a um elemento Ã© O(1).
A complexidade de espaÃ§o tambÃ©m Ã© O(1), pois nÃ£o consideramos a entrada em seu cÃ¡lculo, a saÃ­da Ã© sempre True ou False"""


def battleship(grid, line, column):
    if grid[line][column] == 1:
        return True

    return False


# ğŸš€ ExercÃ­cio 3 Utilize o mÃ³dulo random da linguagem Python para gerar um array com 100 nÃºmeros. Cada um desses nÃºmeros deve ser a mÃ©dia de n nÃºmeros gerados aleatoriamente. Qual Ã© a ordem de complexidade de tempo e de espaÃ§o deste programa?


import random


def randomAverages(n):
    list_of_averages = []

    for _ in range(100):
        average = 0
        for _ in range(n):
            average += random.randrange(1, n)
        average = average / n
        list_of_averages.append(average)

    return list_of_averages


# O(n) + O(n)

""" Mesmo que, para o exemplo dado, o valor de `n` seja muito menor que o valor da constante `100`, para valores de `n` grandes o valor da constante se torna desprezÃ­vel. Esse problema, entÃ£o, Ã© `O(n)`. Pelo mesmo motivo, a complexidade de espaÃ§o Ã© constante, ou seja, `O(n)`"""


# ExercÃ­cio 4 Dado um array de doces candies e um valor inteiro extra_candies, onde o candies[i] representa o nÃºmero de doces que a enÃ©sima crianÃ§a possui. Para cada crianÃ§a, verifique se hÃ¡ uma maneira de distribuir doces extras entre as crianÃ§as de forma que ela possa ter o maior nÃºmero de doces entre elas. Observe que vÃ¡rias crianÃ§as podem ter o maior nÃºmero de doces. Analise o cÃ³digo abaixo para o melhor, pior caso e caso mÃ©dio. FaÃ§a a anÃ¡lise de complexidade de espaÃ§o tambÃ©m.


def kids_with_candies(candies, extra_candies):
    # parece que a soluÃ§Ã£o percorre o array somente uma vez,
    # porÃ©m isto Ã© feito duas vezes, uma no `max` e outra para
    # preencher a resposta
    max_candies = max(candies)
    return [candy + extra_candies >= max_candies for candy in candies]


# saÃ­da: [True, True, True, False, True]
# print(kids_with_candies([2, 3, 5, 1, 3], 3))

# Resp: melhor caso: O(1) + O(1) => O(1) / pior caso: O(n) + O(n) => O(n) / mÃ©dio: O(n/2) + O(n/2) => O(n/2) / EspaÃ§o: O(n)
